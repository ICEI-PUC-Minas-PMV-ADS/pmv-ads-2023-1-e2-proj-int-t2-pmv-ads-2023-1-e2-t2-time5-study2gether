@model Study2gether.Models.Post

@{
    ViewData["Title"] = "Interacoes";
    var categories = ViewData["Categories"] as List<Category>;
    var axes = ViewData["Axes"] as List<Axis>;
    var microfoundations = ViewData["Microfoundations"] as List<Microfoundation>;
    var postList = ViewData["postList"] as List<Post>;
    string filters = ViewData["Filters"] as string;
    filters = filters?.Replace("\n", "<br>");
    var filteredPosts = ViewData["FilteredPostList"] as List<Post>;
}

<div class="row container-fluid">
    <div class="col-12 col-sm-2 mt-2" id="lista">
        <ul class="row justify-content-center align-items-center p-0">
            <li class="btn btn-warning d-block col-3 col-sm-8 mt-2 text-dark  @((ViewContext.RouteData.Values["action"].ToString() == "Indicacoes") ? "selected" : "")"><a class="text-dark" asp-action="Indicacoes">Indicações</a></li>
            <li class="btn btn-warning d-block col-3 col-sm-8 mt-2 text-dark  @((ViewContext.RouteData.Values["action"].ToString() == "Perguntas") ? "selected" : "")"><a class="text-dark" asp-action="Perguntas">Perguntas</a></li>
            <li class="btn btn-warning d-block col-3 col-sm-8 mt-2 text-dark  @((ViewContext.RouteData.Values["action"].ToString() == "Interacoes") ? "selected" : "")"><a class="text-dark" asp-action="Interacoes">Interações</a></li>
        </ul>
    </div>

    <div class="posts justify-content-center col-12 col-sm-10 mt-2">
        @if (filters != "")
        {
            <p class="text-light">Mostrando resultados filtrados por: @Html.Raw(filters)</p>
        }
        <div id="post-1" class="container-fluid">

            @if (ViewData["FilteredPostList"] != null && !string.IsNullOrEmpty(ViewData["FilteredPostList"].ToString()))
            {
                @foreach (var obj in filteredPosts)
                {
                    <div class="caixa card rounded-lg mb-3">
                        <div class="card-header">
                            <h4 class="text-center"><a asp-action="Respostas" asp-route-id="@obj.idPost">@obj.title</a></h4>
                        </div>
                        <div class="card-body">
                            <div>@Html.Raw(@obj.content)</div>
                            @foreach (var x in @obj.Axes)
                            {
                                <div class="bg-info text-dark d-inline-block p-2 rounded">@Html.Raw(x.name)</div>
                            }
                            @foreach (var x in @obj.Microfoundations)
                            {
                                <div class="bg-info text-dark d-inline-block p-2 rounded">@Html.Raw(x.name)</div>
                            }
                            @foreach (var x in @obj.Categories)
                            {
                                <div class="bg-info text-dark d-inline-block p-2 rounded">@Html.Raw(x.name)</div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between">
                                <div class="reactions d-inline">

                                    <p class="d-inline">@obj.Answers.Count()</p> <a asp-action="Respostas" asp-route-id="@obj.idPost"><i class="fa-regular fa-comment-dots"></i></a>

                                    <p class="d-inline">@obj.views</p> <a href="#"><i class="fa-solid fa-chart-column"></i></a>

                                    <p class="d-inline" id="favorites_@Html.Raw(@obj.idPost)">@obj.Reactions.Count(r => r.Name == "Star")</p> <a onclick="setReactionToPost('@obj.idPost');sendReaction('Star', '@obj.idPost')" style="color: #0366d6; cursor: pointer;"><i class="fa-solid fa-star"></i></a>

                                    <p class="d-inline" id="react_@Html.Raw(@obj.idPost)">@obj.Reactions.Count()</p> <a onclick="setReactionToPost('@obj.idPost')" class="pe-auto" data-toggle="modal" data-target="#emojiPicker" style="color: #0366d6; cursor: pointer "><i class="fa-regular fa-face-smile"></i></a>

                                </div>
                                <div>
                                    @{
                                        var reactOrder = @obj.Reactions.GroupBy(info => info.Name).Select(n => new
                                        {
                                            reactionName = n.Key,
                                            reactionCount = n.Count()
                                        }).OrderByDescending(n => n.reactionCount).ToList();
                                        @for (var i = 0; i < 5; i++)
                                        {
                                            var react = @reactOrder.ElementAtOrDefault(@i);
                                            if (react != null)
                                            {
                                                <p class="d-inline">@react.reactionCount</p>
                                                <p class="d-inline reactionsChanger">@react.reactionName</p>
                                            }
                                        }
                                    }
                                </div>
                                <div>
                                    <label><small>Postado em: @obj.created_date</small></label>
                                </div>
                            </div>
                        </div>
                    </div>}
            }
            else
            {
                @foreach (var obj in postList)
                {
                    <div class="caixa card rounded-lg mb-3">
                        <div class="card-header">
                            <h4 class="text-center"><a asp-action="Respostas" asp-route-id="@obj.idPost">@obj.title</a></h4>
                        </div>
                        <div class="card-body">
                            <div>@Html.Raw(@obj.content)</div>
                            @foreach (var x in @obj.Axes)
                            {
                                <div class="bg-info text-dark d-inline-block p-2 rounded">@Html.Raw(x.name)</div>
                            }
                            @foreach (var x in @obj.Microfoundations)
                            {
                                <div class="bg-info text-dark d-inline-block p-2 rounded">@Html.Raw(x.name)</div>
                            }
                            @foreach (var x in @obj.Categories)
                            {
                                <div class="bg-info text-dark d-inline-block p-2 rounded">@Html.Raw(x.name)</div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between">
                                <div class="reactions d-inline">

                                    <p class="d-inline">@obj.Answers.Count()</p> <a asp-action="Respostas" asp-route-id="@obj.idPost"><i class="fa-regular fa-comment-dots"></i></a>

                                    <p class="d-inline">@obj.views</p> <a href="#"><i class="fa-solid fa-chart-column"></i></a>

                                    <p class="d-inline" id="favorites_@Html.Raw(@obj.idPost)">@obj.Reactions.Count(r => r.Name == "Star")</p> <a onclick="setReactionToPost('@obj.idPost');sendReaction('Star', '@obj.idPost')" style="color: #0366d6; cursor: pointer;"><i class="fa-solid fa-star"></i></a>

                                    <p class="d-inline" id="react_@Html.Raw(@obj.idPost)">@obj.Reactions.Count()</p> <a onclick="setReactionToPost('@obj.idPost')" class="pe-auto" data-toggle="modal" data-target="#emojiPicker" style="color: #0366d6; cursor: pointer "><i class="fa-regular fa-face-smile"></i></a>

                                </div>
                                <div>
                                    @{
                                        var reactOrder = @obj.Reactions.GroupBy(info => info.Name).Select(n => new
                                        {
                                            reactionName = n.Key,
                                            reactionCount = n.Count()
                                        }).OrderByDescending(n => n.reactionCount).ToList();
                                        @for (var i = 0; i < 5; i++)
                                        {
                                            var react = @reactOrder.ElementAtOrDefault(@i);
                                            if (react != null)
                                            {
                                                <p class="d-inline">@react.reactionCount</p>
                                                <p class="d-inline reactionsChanger">@react.reactionName</p>
                                            }
                                        }
                                    }
                                </div>
                                <div>
                                    <label><small>Postado em: @obj.created_date</small></label>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }

        </div>
        <a class="pe-auto" data-toggle="modal" data-target="#postInteraction" style="cursor: pointer">
            <i class="fa-solid fa-circle-plus text-primary fa-3x fixed-bottom mb-3 ml-3 pe-auto"></i>
        </a>
    </div>
</div>

<div class="modal fade bd-example-modal-lg" id="postInteraction" tabindex="-1" role="dialog" aria-labelledby="postInteractionitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header" id="testring">
                <h5 class="modal-title" id="postInteractionLongTitle">Publique sua Interação</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form asp-action="Interacoes" id="postInteraction">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            <label for="categoryId"><b>Categorias</b></label>
                            <select multiple class="form-control selectpicker" data-live-search="true" id="categoryId" name="categoryId">
                                @foreach (var obj in categories)
                                {
                                    <option value="@obj.idCategory">@obj.name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-4">
                            <label><b>Eixos</b></label>
                            <select multiple class="form-control selectpicker" data-live-search="true" id="axisId" name="axisId">
                                @foreach (var obj in axes)
                                {
                                    <option value="@obj.idAxis">@obj.name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-4">
                            <label><b>Microfundamentos</b></label>
                            <select multiple class="form-control selectpicker" data-live-search="true" id="microfoundationId" name="microfoundationId">
                                @foreach (var obj in microfoundations)
                                {
                                    <option value="@obj.idMicrofoundation">@obj.name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label asp-for="title" class="control-label">Titulo</label>
                        <input asp-for="title" class="form-control" />
                        <span asp-validation-for="title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="content" class="control-label">Conteudo</label>
                        <textarea id="tiny" asp-for="content"></textarea>
                        <span asp-validation-for="content" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                        <div class="float-right d-inline-block">
                            <input type="submit" value="Publicar" class="btn btn-primary" />
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="emojiPicker" tabindex="-1" role="dialog" aria-labelledby="emojiPickerLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" id="picker" style="background-color:transparent"></div>
    </div>
</div>
<a href="#" id="emojiRedirect" hidden></a>


<script>
    const pickerOptions = { onEmojiSelect: sendReaction };
    const picker = new EmojiMart.Picker(pickerOptions);

    $(document).ready(function () {
        $('#picker').append(picker)
        $('[data-toggle="popover"]').popover()

        $('.reactionsChanger').each(function (index) {
            let emoji = search($(this).html())
            let element = $(this)
            test = emoji.then(
                function (value) { element.html(value[0]); },
            )
        })
    });

    function setReactionToPost(postId) {
        $('#emojiRedirect').html(postId)
    }

    function sendReaction(emoji, postId = null) {
        $.ajax({
            type: 'GET',
            url: typeof (postId) === 'string' ? `/Posts/ReactToPost?idPost=${postId}&reactioName=${emoji}` : `/Posts/ReactToPost?idPost=${$('#emojiRedirect').html()}&reactioName=${emoji.name}`,
            success: function (data) {
                Toastify({
                    text: data.message,
                    duration: 3000,
                    style: {
                        background: data.type == 'add' || data.type == 'FavAdd' ? "linear-gradient(to right, #00b09b, #96c93d)" : "linear-gradient(to right, #ffa8a8, #bbbd1c)",
                    },
                }).showToast();
                let PostId = $('#emojiRedirect').html()
                let reactionCount = $('#react_' + PostId)
                let favoritesCount = $('#favorites_' + PostId)

                if (data.type != 'error') {
                    if (data.type == 'add' || data.type == 'remove') {
                        data.type == 'add' ? reactionCount.html(parseInt(reactionCount.html()) + 1) : reactionCount.html(parseInt(reactionCount.html()) - 1);
                    } else if (data.type == 'FavAdd' || data.type == 'FavRemove') {
                        console.log('in')
                        data.type == 'FavAdd' ? favoritesCount.html(parseInt(favoritesCount.html()) + 1) : favoritesCount.html(parseInt(favoritesCount.html()) - 1);
                    }
                }
            },
            error: function (data) {
                Toastify({
                    text: 'Houve um erro ao adicionar sua reação',
                    duration: 3000,
                    style: {
                        background: "red",
                    },
                }).showToast();
            }
        });

        $('#emojiPicker').click();
    };
    async function search(value) {
        const emojis = await window.EmojiMart.SearchIndex.search(value)
        const results = emojis.map((emoji) => {
            return emoji.skins[0].native
        })

        return results
    }
</script>
<script>
    $("#postInteraction").submit(function (e) {
        if (!'@Html.Raw(User.Identity.Name)') {
            Toastify({
                text: "É necessario estar logado para efetuar uma postagem.",
                duration: 3000,
                style: {
                    background: "linear-gradient(to right, #ffa8a8, #bbbd1c)",
                },
            }).showToast();
            return false
        }
        category = $("#categoryId").val()
        title = $("#title").val()
        content = $("#tiny").val()
        if (category.length > 0 && title && content) {
            return true
        }
        else {
            Toastify({
                text: "Titulo, Conteudo e Categoria são obrigatórios",
                duration: 3000,
                style: {
                    background: "linear-gradient(to right, #ffa8a8, #bbbd1c)",
                },
            }).showToast();
            return false
        };
    });
</script>